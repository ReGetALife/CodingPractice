package tk.solidays.algorithm.leetcode;

/**
 * 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
 * <p>
 * 示例 1:
 * <p>
 * 输入: [1,3,4,2,2]
 * 输出: 2
 * 示例 2:
 * <p>
 * 输入: [3,1,3,4,2]
 * 输出: 3
 * 说明：
 * <p>
 * 不能更改原数组（假设数组是只读的）。
 * 只能使用额外的 O(1) 的空间。
 * 时间复杂度小于 O(n2) 。
 * 数组中只有一个重复的数字，但它可能不止重复出现一次。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/find-the-duplicate-number
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class LeetCode287 {
    // 法一，对目标值存在的范围进行二分，例如先判断目标值是否在0~n/2范围内
    /* 法二，快慢指针。
     * 把数组中的元素看成链表中的节点，把元素的值看成指针，它指向后继的索引
     * 那么仅有重复元素的入度会大于1，0位置元素的入度肯定为0，可以作为链表入口。元素的出度都是1。
     * 因为出度都是1，所以从0位置一直往后遍历不会是停止的，因此必然有环。
     * 而只有重复元素的入度大于1，因此环的入口必然是重复元素。
     */
    public int findDuplicate(int[] nums) {
        int p1 = nums[0];
        int p2 = p1;
        do {
            p2 = nums[p2];
            p2 = nums[p2];
            p1 = nums[p1];
        } while (p1 != p2);//指针停在了c
        p1 = nums[0];
        while (p1 != p2) {
            p1 = nums[p1];
            p2 = nums[p2];
        }
        return p1;
    }
}
